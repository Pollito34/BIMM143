---
title: "Class 12: Transcriptomics and the analysis of RNA-Seq data"
author: "Angela Bartolo PID: A15932451"
format: html
---

Here we will use the DESeq2 package for RNASeq anaylysis. The data for today's class comes from a study of airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import thir data

We need two things for this analysis:

- countData (counts for every transcript/gene in each experiment)
- colData (metadata that describes the experimental setup)

```{r}
countData <- read.csv("airway_scaledcounts.csv", row.names=1)
head(countData)
```

```{r}
metadata <-  read.csv("airway_metadata.csv")
head(metadata)
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(countData)
```


> Q2. How many ‘control’ cell lines do we have? 

```{r}
sum( metadata$dex == "control" )

# Another way to solve
# table(metadata$dex)
```

Finding means of control and treated 

- Step 1

Calculate the mean of the control samples (i.e. columns in the countData)

(a) We need to find which columns in the countData are "control" samples
(b) Extract all the control columns from `countData` and call it `control.counts`
(c) Calculate the mean value across the rows of `control.counts`  i.e calculate the mean count values for each gene in the control samples. 

```{r}
#a
control.inds <- metadata$dex == "control"

#b
control.counts <- countData[ , control.inds ]

#c
# Another way to solve
# apply( control.counts , 1 , mean )

control.means <- rowMeans(control.counts)
head(control.means)
```

- Step 2

Calculate the mean of the treated samples 

```{r}
treated.means <- rowMeans( countData[ , metadata$dex == "treated" ] )
head(treated.means)
```

We now have control and treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```
```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log = "xy")
```

We use logtransforms for skewed data such as this and because we really care most about relative changes in magnitute. 

We most often use log2 as our tranform as the math is easier to interpret than log10 or other. 

If we have no change - i.e. same values in the control and treated we will have a log2 values of zero

```{r}
log2(20/20)
```

If I have double the amount i.e. 20 compared to 10, I will have a log2 fold-change of +1 (increase)

```{r}
log2(20/10)
```

If I have half the amount i.e. 10 compared to 20, I will have a log2 fold-change of -1 (decrease)

```{r}
log2(10/20)
```

```{r}
meancounts$log2fc <- log2(meancounts$treated.means / meancounts$control.means)
head(meancounts)
```

> Q. How many genes are upregulated at the common threshold of +2 log2fc values 

```{r}
sum(meancounts$log2fc >=2, na.rm=T)
```

What about the stats (p-value). They are big changes but are they statistically significant

To do this properly we will turn to DESeq2 package

## DESeq2 analysis
```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need out input countData and colData in a specific formate that DESeq wants: 

```{r}
dds <- DESeqDataSetFromMatrix(countData = countData,
                       colData = metadata, 
                       design = ~dex)
```

To tun the analysis I can now use the man DESeq2 function called `DESeq` with `dds` as input. 

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` funciton from the package. 

```{r}
res <- results(dds)
head(res)
```

Let's makes a final (for today) plot of log2 fold-chain vs the adjusted P-values.

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low p-values that we care about and these are lost in the skewed plot above. Let's take the log of the $padj values for our plot. 

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2,-2), col = "green")
abline(h= -log(0.05), col = "green")
```

Finally we can make a color vector to use in the plot to better highlight the genes we care about. 

```{r}
mycols <- rep("grey", nrow(res))
mycols[abs(res$log2FoldChange) >= 2] <- "red"
mycols[res$padj > 0.05] <- "grey"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(+2,-2), col = "green")
abline(h= -log(0.05), col = "green")

```

```{r}
head(res)
```

## Adding annotation data 

We can use the AnnotationDbi package to add annotation data such as gene identifiers from different sources to our results object. 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

We can translate (a.k.a "map") between all these database i.d. formats: 
```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")

```

```{r}
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",     # The new format we want to add
                     multiVals="first")

```

```{r}
res$genename<- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="GENENAME",     # The new format we want to add
                     multiVals="first")

```

## Save our results to date

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway analysis 

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes and the kinds of biology they are involved in. 

```{r}
#/ library
library(pathview)
library(gage)
library(gageData)

```

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)

```

Make a new vector of fold-change values that I will use as input for `gage` this will have the ENTREZ IDs as names. 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

Look at the top 3 "LESS"
```{r}
head(keggres$less,3)
```

Now I can use the **KEGG IDs** ("hsa05310" etc.) of these pathways from gage to view our genes mapped to these pathways.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.png)

